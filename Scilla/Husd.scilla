scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils
library FungibleToken

let true: Bool = True
let false: Bool = False
  
let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeIsNotHash
| CodeIsZero
| CodeIsNotOwner

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender              => Int32 -1
      | CodeInsufficientFunds     => Int32 -2
      | CodeInsufficientAllowance => Int32 -3
      | CodeIsNotHash             => Int32 -4
      | CodeIsZero                => Int32 -5
      | CodeIsNotOwner            => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0
let one = Uint128 1
let scalar = Uint128 1000000

let husdToHash: String = "backward"
let hashToHusd: String = "forward"


(* Dummy user-defined ADT *)
type Unit =
| Unit

type Direction = 
| HashToHusd
| HusdToHash

type ExchangeOrder = | ExchangeOrder of ByStr20 Uint128 Direction

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

let zeroAddress: ByStr20 = 0x0000000000000000000000000000000000000000
let hashAddress: ByStr20 = 0xb358680dce1f43da6b271e5322644bcfdc769b8e

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  init_supply : Uint128
)

(* Mutable fields *)

field total_supply : Uint128 = zero

field total_hash : Uint128 = zero

field balances: Map ByStr20 Uint128 
  = let emp_map = Emp ByStr20 Uint128 in
    builtin put emp_map contract_owner init_supply

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)
  
field nonce : Uint128 = zero

field pending: Map Uint128 ExchangeOrder 
  = Emp Uint128 ExchangeOrder

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

procedure IsHash()
  is_sender = builtin eq _sender hashAddress;
  match is_sender with
  | True =>
  | False =>
    err = CodeIsNotHash;
    ThrowError err    
  end
end

procedure IsOwner()
  is_sender = builtin eq _sender contract_owner;
  match is_sender with
  | True =>
  | False =>
    err = CodeIsNotOwner;
    ThrowError err    
  end
end

procedure IsNotZero(amount: Uint128)
  is_sender = builtin eq amount zero;
  match is_sender with
  | True =>
    err = CodeIsZero;
    ThrowError err      
  | False =>
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = CodeInsufficientFunds;
    ThrowError err
  end
end

(***************************************)
(*             Transitions             *)
(***************************************)

(* register with HASH *)
transition RegisterWithHash()
  IsOwner;
  msg_to_hash = {_tag: "RegisterHusd"; _recipient: hashAddress; _amount: zero};
  msg = one_msg msg_to_hash;
  send msg
end



transition ConvertHusdtoHash(amount: Uint128)
  
  (* check if balance is enough *)
  o_from_bal <- balances[_sender];
  bal = get_val o_from_bal;
  can_do = uint128_le amount bal; 
  match can_do with
  | True =>
    temp_nonce <- nonce;
    new_nonce = builtin add temp_nonce one;
    nonce := new_nonce;
    new_order = 
      let new_sender = _sender in
      let new_amount = amount in
      let new_direction = HusdToHash in
    ExchangeOrder new_sender new_amount new_direction;
    pending[new_nonce] := new_order;
    
    (* Emit event for Oracle *)
    e = {_eventname : "MakeTransfer"; sender : _sender; nonce: new_nonce; direction: husdToHash};
    event e
  | False =>  
    err = CodeInsufficientFunds;
    ThrowError err
  end
end
  
transition convertHashtoHusd(amount: Uint128, sender : ByStr20)
  
  (* check if hash contract is sender *)
  IsHash;
  
  temp_nonce <- nonce;
  new_nonce = builtin add temp_nonce one;
  nonce := new_nonce;
  new_order = 
    let new_sender = sender in
    let new_amount = amount in
    let new_direction = HashToHusd in
  ExchangeOrder new_sender new_amount new_direction;
  pending[new_nonce] := new_order;
  
  (* emit event *)
  e = {_eventname : "MakeTransfer"; sender : sender; nonce: new_nonce; direction: hashToHusd};
  event e
end
  

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  IsNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = get_val some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  
  AuthorizedMoveIfSufficientBalance _sender to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e    

end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  o_spender_allowed <- allowances[from][_sender];
  allowed = get_val o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed

  | False =>
    err = CodeInsufficientAllowance;
    ThrowError err
  end
end



transition resumeTransfer(non: Uint128, hashHusd: Uint128)
  IsOwner;

  (* get and convert amount to be transfered *)
  maybe_order <- pending[non];
  match maybe_order with 
  | None =>
  | Some order =>
    match order with
    | ExchangeOrder sender amount direction =>
      match direction with
      | HashToHusd =>
    
        (* Calculate the Husd amount to be send *)
        husd_amount_unscaled = builtin mul amount hashHusd;
        husd_amount = builtin div husd_amount_unscaled scalar;
    
        (* Accept the Hash transfer from Sender *)
        msg_to_token = {
          _tag : "TransferFrom"; _recipient: hashAddress; _amount: zero;
          from: sender; to: _this_address; amount: amount
        };
        msgs = one_msg msg_to_token;
        send msgs;
        
        (* Increase the HASH deposit counter *)
        temp_total_hash <- total_hash;
        new_total_hash = builtin add temp_total_hash amount;
        total_hash := new_total_hash;
    
        (* send the amount to account and delete pending entry*)
        maybe_balance <- balances[sender];
        existing_balance = get_val maybe_balance;
        new_balance = builtin add husd_amount existing_balance;
        balances[sender] := new_balance;
        delete pending[non]
        
      | HusdToHash =>
        
        (* Calculate the Hash amount to be send *)
        hash_amount_unscaled = builtin mul amount scalar;
        hash_amount = builtin div hash_amount_unscaled hashHusd;
        
        (* Take the HUSD from sender *)
        o_from_bal <- balances[sender];
        bal = get_val o_from_bal;
        new_balance = builtin sub bal amount; 
        balances[sender] := new_balance;
        delete pending[non];
        
        (* Check if HASH is enough to pay *)
        temp_total_hash <- total_hash;
        temp_total_hash = builtin add temp_total_hash one;
        hash_not_enough = uint128_ge hash_amount temp_total_hash;
        
        match hash_not_enough with
        | True => 
          
          (* Ask HASH CONTRACT to give hash to Sender  *)
          msg_to_hash = {_tag: "Mint"; _recipient: hashAddress; _amount: zero; 
                    to: sender; amount: hash_amount};
          msgs = one_msg msg_to_hash;
          send msgs
        | False => 
          
          (* Increase the HASH deposit counter *)
          new_total_hash = builtin sub temp_total_hash amount;
          total_hash := new_total_hash;

          (* Ask HASH CONTRACT to give hash to Sender  *)
          msg_to_hash = {_tag: "Transfer"; _recipient: hashAddress; _amount: zero; 
                    to: sender; amount: hash_amount};
          msgs = one_msg msg_to_hash;
          send msgs
        end
        
        
      end
    end
  end
end




